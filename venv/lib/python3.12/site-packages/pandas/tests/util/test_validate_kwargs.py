
from pandas.util._validators import (
    validate_bool_kwarg,
    validate_kwargs,
)


def _fname():
    return "func"


    good_arg = "f"
    bad_arg = good_arg + "o"

    compat_args = {good_arg: "foo", bad_arg + "o": "bar"}
    kwargs = {good_arg: "foo", bad_arg: "bar"}

    msg = rf"{_fname}\(\) got an unexpected keyword argument '{bad_arg}'"

        validate_kwargs(_fname, kwargs, compat_args)


    bad_arg = "foo"
    msg = (
        rf"the '{bad_arg}' parameter is not supported "
        rf"in the pandas implementation of {_fname}\(\)"
    )

    compat_args = {"foo": 1, "bar": "s", "baz": None}

    kwarg_keys = ("foo", "bar", "baz")
    kwarg_vals = (2, "s", None)

    kwargs = dict(zip(kwarg_keys[:i], kwarg_vals[:i]))

        validate_kwargs(_fname, kwargs, compat_args)


    # No exceptions should be raised.
    compat_args = {"f": None, "b": 1, "ba": "s"}

    kwargs = {"f": None, "b": 1}
    validate_kwargs(_fname, kwargs, compat_args)


    msg = (
        f'For argument "{name}" expected type bool, '
        f"received type {type(value).__name__}"
    )

        validate_bool_kwarg(value, name)


    assert validate_bool_kwarg(value, name) == value


from pandas.util._decorators import deprecate_kwarg



@deprecate_kwarg("old", "new")
def _f1(new=False):
    return new


_f2_mappings = {"yes": True, "no": False}


@deprecate_kwarg("old", "new", _f2_mappings)
def _f2(new=False):
    return new


def _f3_mapping(x):
    return x + 1


@deprecate_kwarg("old", "new", _f3_mapping)
def _f3(new=0):
    return new


    x = 78

    with tm.assert_produces_warning(klass):
        assert _f1(**{key: x}) == x


    with tm.assert_produces_warning(FutureWarning):
        assert _f2(old=key) == _f2_mappings[key]


    with tm.assert_produces_warning(FutureWarning):
        assert _f2(old=key) == key


    with tm.assert_produces_warning(FutureWarning):
        assert _f3(old=x) == _f3_mapping(x)


    msg = "((can only|cannot) concatenate)|(must be str)|(Can't convert)"

        _f3(old="hello")


    msg = "mapping from old to new argument values must be dict or callable!"


        @deprecate_kwarg("old", "new", 0)
        def f4(new=None):
            return new


@deprecate_kwarg("old", None)
def _f4(old=True, unchanged=True):
    return old, unchanged


    x = 9

    if key == "old":
        klass = FutureWarning
        expected = (x, True)
    else:
        klass = None
        expected = (True, x)

    with tm.assert_produces_warning(klass):
        assert _f4(**{key: x}) == expected

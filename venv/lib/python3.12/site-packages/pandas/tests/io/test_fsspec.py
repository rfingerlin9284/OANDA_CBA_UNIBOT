import io

import numpy as np

from pandas._config import using_string_dtype

from pandas import (
    DataFrame,
    date_range,
    read_csv,
    read_excel,
    read_feather,
    read_json,
    read_parquet,
    read_pickle,
    read_stata,
    read_table,
)

    "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
)


    from fsspec import register_implementation
    from fsspec.implementations.memory import MemoryFileSystem
    from fsspec.registry import _registry as registry

    class TestMemoryFS(MemoryFileSystem):

        def __init__(self, **kwargs) -> None:
            super().__init__(**kwargs)

    yield TestMemoryFS()
    TestMemoryFS.store.clear()


def df1():
    return DataFrame(
        {
            "int": [1, 3],
            "float": [2.0, np.nan],
            "str": ["t", "s"],
            "dt": date_range("2018-06-18", periods=2),
        }
    )


def cleared_fs():

    memfs = fsspec.filesystem("memory")
    yield memfs
    memfs.store.clear()


    text = str(df1.to_csv(index=False)).encode()
        w.write(text)

    tm.assert_frame_equal(df1, df2)


    from fsspec.registry import known_implementations

    monkeypatch.setitem(
        known_implementations,
        "couldexist",
        {"class": "unimportable.CouldExist", "err": err_msg},
    )




    tm.assert_frame_equal(df1, df2)


    ext = "xlsx"
    df1.to_excel(path, index=True)

    df2 = read_excel(path, parse_dates=["dt"], index_col=0)

    tm.assert_frame_equal(df1, df2)



    mode = "wb" if binary_mode else "w"
    with fsspec.open(path, mode=mode).open() as fsspec_object:
        df1.to_csv(fsspec_object, index=True)
        assert not fsspec_object.closed

    mode = mode.replace("w", "r")
    with fsspec.open(path, mode=mode) as fsspec_object:
        df2 = read_csv(
            fsspec_object,
            parse_dates=["dt"],
            index_col=0,
        )
        assert not fsspec_object.closed

    tm.assert_frame_equal(df1, df2)


    df = DataFrame({"a": [0]})
    df.to_csv(
    )


    # GH #39167
    df = DataFrame({"a": [0]})
    df.to_csv(
    )


    extension = "xlsx"

    df = DataFrame({"a": [0]})





    df1.to_parquet(
    )


    df = DataFrame({"a": [0]})
    df.to_parquet(
        engine="pyarrow",
        compression=None,
    )
    read_parquet(
        engine="pyarrow",
    )


@td.skip_array_manager_not_yet_implemented  # TODO(ArrayManager) fastparquet

    df = DataFrame({"a": [0]})
    df.to_parquet(
        engine="fastparquet",
        compression=None,
    )
    read_parquet(
        engine="fastparquet",
    )


    tm.assert_equal(
        read_csv(
            f"s3://{s3_public_bucket_with_data.name}/tips.csv", storage_options=s3so
        ),
        read_csv(tips_file),
    )
    # the following are decompressed by pandas, not fsspec
    tm.assert_equal(
        read_csv(
            f"s3://{s3_public_bucket_with_data.name}/tips.csv.gz", storage_options=s3so
        ),
        read_csv(tips_file),
    )
    tm.assert_equal(
        read_csv(
            f"s3://{s3_public_bucket_with_data.name}/tips.csv.bz2", storage_options=s3so
        ),
        read_csv(tips_file),
    )


    tm.assert_equal(
        read_csv(
            f"{protocol}://{s3_public_bucket_with_data.name}/tips.csv",
            storage_options=s3so,
        ),
        read_csv(tips_file),
    )


@td.skip_array_manager_not_yet_implemented  # TODO(ArrayManager) fastparquet

    df1.to_parquet(
        fn, index=False, engine="fastparquet", compression=None, storage_options=s3so
    )
    df2 = read_parquet(fn, engine="fastparquet", storage_options=s3so)
    tm.assert_equal(df1, df2)


@td.skip_if_installed("fsspec")
    msg = "Missing optional dependency 'fsspec'|fsspec library is required"


    df = DataFrame({"a": [0]})
    tm.assert_frame_equal(df, out)


    df = DataFrame({"a": [0]})
    tm.assert_frame_equal(df, out)


    df = DataFrame({"a": [0]})
    df.to_json(
        compression=compression,
    )
    out = read_json(
        compression=compression,
    )
    tm.assert_frame_equal(df, out)


    df = DataFrame({"a": [0]})
    df.to_stata(
    )
    tm.assert_frame_equal(df, out.astype("int64"))


    df = DataFrame({"a": [0]})


        read_csv("localfile", storage_options={"a": True})
        read_parquet("localfile", storage_options={"a": True})
    by = io.BytesIO()

        read_csv(by, storage_options={"a": True})

    df = DataFrame({"a": [0]})
        df.to_parquet("nonfsspecpath", storage_options={"a": True})

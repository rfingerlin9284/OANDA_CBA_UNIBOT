"""
Tests that can be parametrized over _any_ Index object.
"""
import re

import numpy as np

from pandas.errors import InvalidIndexError



    # GH#7897
        if index:
            pass

        bool(index)


    msg = "cannot sort an Index object in-place, use sort_values instead"
        index.sort()


        hash(index)


    if not len(index):
    msg = "Index does not support mutable operations"
        index[0] = index[0]


    # GH#12766

    result = index.map(lambda x: x)
    if index.dtype == object and result.dtype in [bool, "string"]:
        assert (index == result).all()
        # TODO: could work that into the 'exact="equiv"'?
        return  # FIXME: doesn't belong in this file anymore!
    tm.assert_index_equal(result, index, exact="equiv")


    names = index.nlevels * ["apple", "banana", "carrot"]
        index.names = names


    assert index.view().name == index.name


    # GH#19956 ravel returning ndarray is deprecated, in 2.0 returns a view on self
    res = index.ravel()
    tm.assert_index_equal(res, index)


class TestConversion:
        # assert that we are creating a copy of the index

        ser = index.to_series()
        assert ser.values is not index.values
        assert ser.index is not index
        assert ser.name == index.name

        # GH#18699

        # index kwarg
        ser = index.to_series(index=index)

        assert ser.values is not index.values
        assert ser.index is index
        assert ser.name == index.name

        # name kwarg

        assert ser.values is not index.values
        assert ser.index is not index
        assert ser.name != index.name

        assert index.tolist() == list(index)


class TestRoundTrips:
        result = tm.round_trip_pickle(index)
        tm.assert_index_equal(result, index, exact=True)
        if result.nlevels > 1:
            # GH#8367 round-trip with timezone
            assert index.equal_levels(result)

        original_name, index.name = index.name, "foo"
        unpickled = tm.round_trip_pickle(index)
        assert index.equals(unpickled)
        index.name = original_name


class TestIndexing:
        # and never TypeError
        key = np.array([0, 1], dtype=np.intp)

            index.get_loc(key)

            index.get_loc(key.astype(bool))

        # GH#21282
        result = index[...]
        assert result.equals(index)
        assert result is not index

        assert index.name == index[1:].name

        msg = "|".join(
            [
                r"index 101 is out of bounds for axis 0 with size [\d]+",
                re.escape(
                    "only integers, slices (`:`), ellipsis (`...`), "
                    "numpy.newaxis (`None`) and integer or boolean arrays "
                    "are valid indices"
                ),
                "index out of bounds",  # string[pyarrow]
            ]
        )
            index[item]


class TestRendering:
        index.name = "foo"
        assert "'foo'" in str(index)
        assert type(index).__name__ in str(index)


class TestReductions:
        # GH#23081
        msg = r"`axis` must be fewer than the number of dimensions \(1\)"
            index.argmax(axis=1)
            index.argmin(axis=2)
            index.min(axis=-2)
            index.max(axis=-3)

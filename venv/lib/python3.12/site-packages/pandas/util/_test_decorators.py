"""
in order to skip those objects when certain conditions occur. A sample use case
which require ``matplotlib`` and decorated with ``@td.skip_if_no("matplotlib")``

To illustrate, after importing this module:


The decorators can be applied to classes:

@td.skip_if_no("package")
class Foo:
    ...

Or individual functions:

@td.skip_if_no("package")
    ...

"""
from __future__ import annotations

import locale
from typing import (
    TYPE_CHECKING,
    Callable,
)


from pandas._config import get_option

if TYPE_CHECKING:
    from pandas._typing import F

from pandas._config.config import _get_option

from pandas.compat import (
    IS64,
    is_platform_windows,
)
from pandas.compat._optional import import_optional_dependency


    """

    Parameters
    ----------
    package : str
        The name of the package.

    Returns
    -------
        parametrization mark.
    """
        bool(import_optional_dependency(package, errors="ignore")),
        reason=f"Skipping because {package} is installed.",
    )


    """

    specified ``package`` and optionally ensure it meets the ``min_version``


    skipped.

    Parameters
    ----------
    package: str
        The name of the required package.
    min_version: str or None, default None
        Optional minimum version of the package.

    Returns
    -------
        parametrization mark.
    """
    msg = f"Could not import '{package}'"
    if min_version:
        msg += f" satisfying a min_version of {min_version}"
        not bool(
            import_optional_dependency(
                package, errors="ignore", min_version=min_version
            )
        ),
        reason=msg,
    )


    locale.getlocale()[0] != "en_US",
    reason=f"Set local {locale.getlocale()[0]} is not en_US",
)


def parametrize_fixture_doc(*args) -> Callable[[F], F]:
    """
    Intended for use as a decorator for parametrized fixture,
    ``parametrize_fixture_doc`` mark. That mark will format
    initial fixture docstring by replacing placeholders {0}, {1} etc
    with parameters passed as arguments.

    Parameters
    ----------
    args: iterable
        Positional arguments for docstring.

    Returns
    -------
    function
        ``parametrize_fixture_doc`` mark
    """

    def documented_fixture(fixture):
        fixture.__doc__ = fixture.__doc__.format(*args)
        return fixture

    return documented_fixture


def mark_array_manager_not_yet_implemented(request) -> None:
    request.applymarker(mark)


    _get_option("mode.data_manager", silent=True) == "array",
    reason="Not yet implemented for ArrayManager",
)

    _get_option("mode.data_manager", silent=True) == "array",
    reason="Test that relies on BlockManager internals or specific behaviour",
)

    get_option("mode.copy_on_write") is True,
    reason="Not yet implemented/adapted for Copy-on-Write mode",
)

    get_option("mode.copy_on_write") is True,
    reason="Test not valid for Copy-on-Write mode",
)

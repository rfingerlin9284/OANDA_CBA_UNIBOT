"""
Tests related to the ``symbol`` attribute of the ABCPolyBase class.
"""


import numpy.polynomial as poly
from numpy._core import array


class TestInit:
    """
    Test polynomial creation with symbol kwarg.
    """
    c = [1, 2, 3]

        p = poly.Polynomial(self.c)
        assert_equal(p.symbol, 'x')

        ('', ValueError),
        ('3', ValueError),
        (None, TypeError),
        (1, TypeError),
    ))
            p = poly.Polynomial(self.c, symbol=bad_input)

        'x',
        'x_1',
        'A',
        'xyz',
        'β',
    ))
        """
        Values for symbol that should pass input validation.
        """
        p = poly.Polynomial(self.c, symbol=symbol)
        assert_equal(p.symbol, symbol)

        """
        'symbol' attribute is read only.
        """
        p = poly.Polynomial(self.c, symbol='x')
            p.symbol = 'z'

        p = poly.Polynomial(self.c, symbol='y')
        # Create new polynomial from p with different symbol
        pt = poly.Polynomial(p.coef, symbol='t')
        assert_equal(pt.symbol, 't')


class TestUnaryOperators:
    p = poly.Polynomial([1, 2, 3], symbol='z')

        n = -self.p
        assert_equal(n.symbol, 'z')

        out = self.p * 10
        assert_equal(out.symbol, 'z')

        out = 10 * self.p
        assert_equal(out.symbol, 'z')

        out = self.p ** 3
        assert_equal(out.symbol, 'z')


    'rhs',
    (
        poly.Polynomial([4, 5, 6], symbol='z'),
        array([4, 5, 6]),
    ),
)
class TestBinaryOperatorsSameSymbol:
    """
    Ensure symbol is preserved for numeric operations on polynomials with
    the same symbol
    """
    p = poly.Polynomial([1, 2, 3], symbol='z')

        out = self.p + rhs
        assert_equal(out.symbol, 'z')

        out = self.p - rhs
        assert_equal(out.symbol, 'z')

        out = self.p * rhs
        assert_equal(out.symbol, 'z')

        for out in divmod(self.p, rhs):
            assert_equal(out.symbol, 'z')

        out = rhs + self.p
        assert_equal(out.symbol, 'z')

        out = rhs - self.p
        assert_equal(out.symbol, 'z')

        out = rhs * self.p
        assert_equal(out.symbol, 'z')

        for out in divmod(rhs, self.p):
            assert_equal(out.symbol, 'z')


class TestBinaryOperatorsDifferentSymbol:
    p = poly.Polynomial([1, 2, 3], symbol='x')
    other = poly.Polynomial([4, 5, 6], symbol='y')
    ops = (p.__add__, p.__sub__, p.__mul__, p.__floordiv__, p.__mod__)

        assert_raises(ValueError, f, self.other)


class TestEquality:
    p = poly.Polynomial([1, 2, 3], symbol='x')

        other = poly.Polynomial([1, 2, 3], symbol='x')
        assert_(self.p == other)

        other = poly.Polynomial([1, 2, 3], symbol='y')
        assert_(not self.p == other)


class TestExtraMethods:
    """
    Test other methods for manipulating/creating polynomial objects.
    """
    p = poly.Polynomial([1, 2, 3, 0], symbol='z')

        other = self.p.copy()
        assert_equal(other.symbol, 'z')

        other = self.p.trim()
        assert_equal(other.symbol, 'z')

        other = self.p.truncate(2)
        assert_equal(other.symbol, 'z')

        {'domain': [-10, 10]},
        {'window': [-10, 10]},
        {'kind': poly.Chebyshev},
    ))
        other = self.p.convert(**kwarg)
        assert_equal(other.symbol, 'z')

        other = self.p.integ()
        assert_equal(other.symbol, 'z')

        other = self.p.deriv()
        assert_equal(other.symbol, 'z')


    p = poly.Polynomial([3, 2, 1], symbol="t")
    q = poly.Polynomial([5, 1, 0, -1], symbol="λ_1")
    r = p(q)
    assert r.symbol == "λ_1"


#
# Class methods that result in new polynomial class instances
#


    x, y = (range(10),) * 2
    p = poly.Polynomial.fit(x, y, deg=1, symbol='z')
    assert_equal(p.symbol, 'z')


    roots = [-2, 2]
    p = poly.Polynomial.fromroots(roots, symbol='z')
    assert_equal(p.symbol, 'z')


    p = poly.Polynomial.identity(domain=[-1, 1], window=[5, 20], symbol='z')
    assert_equal(p.symbol, 'z')


    p = poly.Polynomial.basis(3, symbol='z')
    assert_equal(p.symbol, 'z')

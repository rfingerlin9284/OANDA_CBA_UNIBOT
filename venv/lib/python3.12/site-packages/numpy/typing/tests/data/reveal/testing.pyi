import contextlib
import re
import sys
import types
import warnings
from collections.abc import Callable
from pathlib import Path
from typing import Any, TypeVar, assert_type

import numpy as np
import numpy.typing as npt

AR_f8: npt.NDArray[np.float64]
AR_i8: npt.NDArray[np.int64]

bool_obj: bool
FT = TypeVar("FT", bound=Callable[..., Any])

def func() -> int: ...

def func2(
    x: npt.NDArray[np.number],
    y: npt.NDArray[np.number],
) -> npt.NDArray[np.bool]: ...


assert_type(
)
assert_type(
)
assert_type(
)
assert_type(
)
assert_type(
    tuple[types.ModuleType, ...],
)
assert_type(
    set[types.ModuleType],
)

    assert_type(c1, list[warnings.WarningMessage])
    assert_type(c2, None)

assert_type(suppress_obj.filter(RuntimeWarning), None)
assert_type(suppress_obj.record(RuntimeWarning), list[warnings.WarningMessage])
with suppress_obj as c3:



if sys.platform == "win32" or sys.platform == "cygwin":
elif sys.platform == "linux":














def func3(a: int) -> bool: ...

assert_type(
)

assert_type(
)

class Test: ...

def decorate(a: FT) -> FT:
    return a







def func4(a: int, b: str) -> bool: ...







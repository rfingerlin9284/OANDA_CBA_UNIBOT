# === AUTO-INJECTED BY inject_full_telemetry_logger.sh ===
# === TELEMETRY LOGGER START ===
import json, os
from datetime import datetime
from logs.telemetry_logger import log_telemetry  # RBOTZILLA INJECTION

def log_telemetry(prediction, confidence, model_name):
    payload = {
        "timestamp": datetime.utcnow().isoformat(),
        "prediction": str(prediction),
        "confidence": round(float(confidence), 4),
        "model": model_name
    }
    with open("logs/ml_predictions.log", "a") as f:
        f.write("ML DECISION: " + json.dumps(payload) + "\\n")
# === TELEMETRY LOGGER END ===

#!/usr/bin/env python3
"""
üöÄ WOLFPACK-LITE LIVE TRADING MAIN
Constitutional PIN: 841921
LIVE TRADING ONLY - REAL MONEY AT RISK

Full headless live trading system with:
- OANDA Forex Trading
- Coinbase Advanced Trade
- OCO Risk Management
- Real-time alerts
"""

import os
import sys
import time
import signal
import argparse
import threading
from datetime import datetime

# Add current directory to path
sys.path.append('.')

class WolfpackLiveTrader:
    """
    üöÄ WOLFPACK LIVE TRADING SYSTEM
    Constitutional PIN: 841921
    """
    
    def __init__(self):
        print("üöÄ WOLFPACK-LITE LIVE TRADING SYSTEM")
        print("Constitutional PIN: 841921") 
        print("LIVE TRADING ONLY - REAL MONEY AT RISK")
        print("=" * 60)
        
        self.is_running = False
        self.start_time = datetime.now()
        
    def verify_constitutional_pin(self, pin):
        """Verify constitutional PIN before trading"""
        from credentials import WolfpackCredentials
        creds = WolfpackCredentials()
        
        if pin != creds.CONSTITUTIONAL_PIN:
            print("‚ùå INVALID CONSTITUTIONAL PIN - ACCESS DENIED")
            return False
        
        print("‚úÖ Constitutional PIN verified - Access granted")
        return True
        
    def initialize_trading_systems(self):
        """Initialize OANDA and Coinbase trading systems"""
        
        try:
            from credentials import WolfpackCredentials
            self.creds = WolfpackCredentials()
            
            print("üîê Credentials loaded")
            print(f"üìä OANDA Account: {self.creds.OANDA_ACCOUNT_ID}")
            print(f"ü™ô Coinbase API Key: {self.creds.COINBASE_API_KEY_ID}")
            
            # Initialize Coinbase authentication
            from coinbase_ed25519_auth import CoinbaseEd25519Auth
            self.coinbase_auth = CoinbaseEd25519Auth()
            
            print("‚úÖ Trading systems initialized")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to initialize trading systems: {e}")
            return False
    
    def start_trading_loops(self):
        """Start the main trading loops"""
        
        print("üöÄ Starting live trading loops...")
        self.is_running = True
        
        def oanda_trading_thread():
            """OANDA forex trading loop"""
            while self.is_running:
                try:
                    print(f"üìä OANDA Forex Monitor - {datetime.now().strftime('%H:%M:%S')}")
                    # Add your OANDA trading logic here
                    time.sleep(30)  # Check every 30 seconds
                except Exception as e:
                    print(f"‚ùå OANDA Error: {e}")
                    time.sleep(10)
        
        def coinbase_trading_thread():
            """Coinbase crypto trading loop"""
            while self.is_running:
                try:
                    print(f"ü™ô Coinbase Crypto Monitor - {datetime.now().strftime('%H:%M:%S')}")
                    # Add your Coinbase trading logic here
                    time.sleep(45)  # Check every 45 seconds
                except Exception as e:
                    print(f"‚ùå Coinbase Error: {e}")
                    time.sleep(15)
        
        def monitoring_thread():
            """System monitoring and heartbeat"""
            while self.is_running:
                try:
                    uptime = (datetime.now() - self.start_time).total_seconds() / 60
                    print(f"üíì System Heartbeat - Uptime: {uptime:.1f}min - Constitutional PIN: 841921")
                    time.sleep(60)  # Heartbeat every minute
                except Exception as e:
                    print(f"‚ùå Monitor Error: {e}")
                    time.sleep(30)
        
        # Start all trading threads
        threading.Thread(target=oanda_trading_thread, daemon=True).start()
        threading.Thread(target=coinbase_trading_thread, daemon=True).start()  
        threading.Thread(target=monitoring_thread, daemon=True).start()
        
        print("‚úÖ All trading loops started")
    
    def setup_signal_handlers(self):
        """Setup graceful shutdown handlers"""
        
        def signal_handler(signum, frame):
            print(f"\nüõë Shutdown signal received ({signum})")
            print("üîÑ Stopping live trading...")
            self.is_running = False
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
    def run(self, constitutional_pin, secure=False):
        """Main trading loop"""
        
        if not self.verify_constitutional_pin(constitutional_pin):
            return False
            
        if not self.initialize_trading_systems():
            return False
        
        self.setup_signal_handlers()
        self.start_trading_loops()
        
        print("\nüöÄ LIVE TRADING ACTIVE")
        print("Constitutional PIN: 841921")
        print("Press Ctrl+C to stop trading")
        print("-" * 60)
        
        try:
            while self.is_running:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Keyboard interrupt - Stopping trading")
        
        print("\n‚úÖ Live trading stopped safely")
        runtime = (datetime.now() - self.start_time).total_seconds() / 60
        print(f"üìä Session runtime: {runtime:.1f} minutes")
        return True

def main():
    """Main entry point"""
    
    parser = argparse.ArgumentParser(description='Wolfpack Live Trading System')
    parser.add_argument('--live', action='store_true', help='Enable live trading mode')
    parser.add_argument('--secure', action='store_true', help='Enable secure mode')
    parser.add_argument('--constitutional-pin', type=str, required=True, help='Constitutional PIN')
    
    args = parser.parse_args()
    
    if not args.live:
        print("‚ùå This system only supports live trading mode")
        return 1
        
    trader = WolfpackLiveTrader()
    success = trader.run(args.constitutional_pin, args.secure)
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
